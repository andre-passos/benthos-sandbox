version: '3.9'

volumes:
  db: {}
  pdb: {}
  rdb: {}
  mdb: {}
  prometheus_data: {}
  grafana_data: {}

services:
  # MySQL
  mysql:
    #env_file: .env
    image: mysql:5.7
    container_name: lib-mysql
    ports:
      - '3307:3306'
    volumes:
      - db:/var/lib/mysql
      - ./docker_build/mysql/conf:/etc/mysql/conf.d
      - ./docker_build/mysql/init.d:/docker-entrypoint-initdb.d
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: 4steps
      MYSQL_USER: user4steps
      MYSQL_PASSWORD: 4$s123456

  # PostgreSQL
  # pg:
  #   image: mdillon/postgis:9.6
  #   container_name: lib-pg
  #   read_only: true
  #   ports:
  #     - "5432"
  #   environment:
  #     PGDATA: /var/lib/postgresql/data/pgdata
  #     POSTGRES_USER: user4steps
  #     POSTGRES_PASSWORD: user4steps
  #   tmpfs:
  #     - /tmp
  #     - /run/postgresql
  #   volumes:
  #     - pdb:/var/lib/postgresql/data/pgdata
  #     - ./docker_build/postgresql/init.d:/docker-entrypoint-initdb.d
  #   restart: unless-stopped
  #   logging:
  #     options:
  #       max-size: "1k"
  #       max-file: "5"

  # Redis
  redis:
    image: redis:5.0
    container_name: lib-redis
    ports:
      - '6379:6379'
    volumes:
      - rdb:/data
      # - /path/to/certs:/opt/bitnami/redis/certs
      # - /path/to/redis-persistence:/bitnami/redis/data
    restart: always
    environment:
    - REDIS_PASSWORD=password123
    - REDIS_PORT_NUMBER=7000
    # - REDIS_TLS_ENABLED=yes
    # - REDIS_TLS_CERT_FILE=/opt/bitnami/redis/certs/redis.crt
    # - REDIS_TLS_KEY_FILE=/opt/bitnami/redis/certs/redis.key
    # - REDIS_TLS_CA_FILE=/opt/bitnami/redis/certs/redisCA.crt
    command: redis-server --requirepass password --appendonly yes
  
  # FOR REPLICATION MODE:
  # redis-master:
  #   image: 'bitnami/redis:latest'
  #   ports:
  #     - '6379'
  #   environment:
  #     - REDIS_REPLICATION_MODE=master
  #     - REDIS_PASSWORD=my_master_password
  #   volumes:
  #     - '/path/to/redis-persistence:/bitnami'

  # redis-replica:
  #   image: 'bitnami/redis:latest'
  #   ports:
  #     - '6379'
  #   depends_on:
  #     - redis-master
  #   environment:
  #     - REDIS_REPLICATION_MODE=slave
  #     - REDIS_MASTER_HOST=redis-master
  #     - REDIS_MASTER_PORT_NUMBER=6379
  #     - REDIS_MASTER_PASSWORD=my_master_password
  #     - REDIS_PASSWORD=my_replica_password
  # Mongo
  mongo:
    image: mongo:4.0
    container_name: lib-mongo
    ports:
      - '27017:27017'

  # Cassandra
  cassandra:
    #build:
    #  context: ./docker_build/cassandra/
    #  dockerfile: Dockerfile
    #  #args:
    #  #  redisHostName: redis-server
    #  #  mysqlHostName: mysql-server
    #image: lib-cassandra:v1.0
    image: cassandra:4.0
    container_name: cassandra-db
    ports:
      - 9042:9042
    volumes:
      - ~/apps/cassandra:/var/lib/cassandra
    environment:
      - CASSANDRA_CLUSTER_NAME=4stepsinfra

  # NATS
  # nats:
  #   image: nats:1.4.0
  #   container_name: lib-nats1
  #   ports:
  #     - "4222:4222"
  #     - "6222:6222"
  #     - "8222:8222"

  # RabbitMQ
  rmq:
    image: rabbitmq:3.7.11-management
    container_name: lib-rmq1
    ports:
      - "4369:4369"
      - "5671:5671"
      - "5672:5672"
      - "15671:15671"
      - "15672:15672"
    environment:
      RABBITMQ_ERLANG_COOKIE: abcabcabcabc
      RABBITMQ_DEFAULT_USER: user4steps
      RABBITMQ_DEFAULT_PASS: 4$s123456

  # Kafka
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: lib-zookeeper1
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:2.12-2.0.1
    #build: ./docker_build/kafka/files/
    container_name: lib-kafka1
    ports:
      - "9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      #KAFKA_ADVERTISED_HOST_NAME: 100.69.18.116
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "Topic1:1:1,Topic2:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  
  